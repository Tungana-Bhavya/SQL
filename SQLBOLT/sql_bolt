
SQL Queries were collected from the sqlbolt website https://sqlbolt.com/. Section wise various queries with answers were provided below.
This can be helpful for students and other professions to improve their skills.

1. SELECT QUERIES

----  
1. Find the title of each film
---SELECT TITLE FROM MOVIES;

2. Find the director of each film
---SELECT DIRECTOR FROM MOVIES;

3. Find the title and director of each film
---SELECT TITLE,DIRECTOR FROM MOVIES;

4. Find the title and year of each film
---SELECT TITLE,YEAR FROM MOVIES;

5. Find all the information about each film
---SELECT * FROM MOVIES;

----

2. QUERIES WITH CONSTRAINTS

-----
1. Find the movie with a row id of 6
---SELECT * FROM MOVIES WHERE ID=6;

2. Find the movies released in the years between 2000 and 2010
---SELECT TITLE,YEAR FROM MOVIES WHERE YEAR BETWEEN 2000 AND 2010;

3. Find the movies not released in the years between 2000 and 2010
---SELECT TITLE,YEAR FROM MOVIES WHERE YEAR<2000 AND YEAR>2000;

4.Find the first 5 Pixar movies and their release year
---SELECT TITLE FROM MOVIES LIMIT 5;

-----

3. QUERIES WITH CONSTRAINTS

-----

1. Find all the Toy Story movies
---SELECT TITLE FROM MOVIES WHERE TITLE LIKE 'TOY%';

2. Find all the movies directed by John Lasseter
---SELECT * FROM MOVIES WHERE DIRECTOR ='JOHN LASSETER';

3. Find all the movies (and director) not directed by John Lasseter
---SELECT * FROM MOVIES WHERE DIRECTOR NOT LIKE 'JOHN LASSETER';

4. Find all the WALL-* movies
---SELECT * FROM MOVIES WHERE TITLE LIKE 'WALL%';

-----

4. FILTERING AND SORTING QUERY RESULTS

-----

1. List all directors of Pixar movies (alphabetically), without duplicates
---SELECT DISTINCT DIRECTOR FROM MOVIES ORDER BY DIRECTOR ASC;

2. List the last four Pixar movies released (ordered from most recent to least)
---SELECT TITLE, YEAR FROM MOVIES ORDER BY YEAR DESC LIMIT 4;

3. List the first five Pixar movies sorted alphabetically
---SELECT TITLE FROM MOVIES ORDER BY TITLE ASC LIMIT 5;

4. List the next five Pixar movies sorted alphabetically
---SELECT TITLE FROM MOVIES ORDER BY TITLE ASC LIMIT 5 OFFSET 5;

-----

5. SIMPLE SELECT QUERIES

-----

1. List all the Canadian cities and their populations
---SELECT CITY, POPULATION FROM NORTH_AMERICAN_CITIES
WHERE COUNTRY = "CANADA";

2. Order all the cities in the United States by their latitude from north to south
---SELECT CITY, LATITUDE FROM NORTH_AMERICAN_CITIES WHERE COUNTRY = "UNITED STATES" ORDER BY LATITUDE DESC;

3. List all the cities west of Chicago, ordered from west to east
---SELECT CITY, LONGITUDE FROM NORTH_AMERICAN_CITIES WHERE LONGITUDE < -87.629798 ORDER BY LONGITUDE ASC;

4. List the two largest cities in Mexico (by population)
---SELECT city, population FROM NORTH_AMERICAN_CITIES WHERE COUNTRY LIKE "MEXICO" ORDER BY POPULATION DESC LIMIT 2;

5. List the third and fourth largest cities (by population) in the United States and their population
---SELECT city, population FROM NORTH_AMERICAN_CITIES WHERE COUNTRY LIKE "UNITED STATES" ORDER BY POPULATION DESC LIMIT 2 OFFSET 2;

-----

6. MULTI-QUERY TABLES WITH JOINS

-----

1. Find the domestic and international sales for each movie
---SELECT TITLE,DOMESTIC_SALES,INTERNATIONAL_SALES FROM MOVIES M JOIN BOXOFFICE B ON M.ID=B.MOVIE_ID

2. Show the sales numbers for each movie that did better internationally rather than domestically
---SELECT TITLE, DOMESTIC_SALES, INTERNATIONAL_SALES FROM MOVIES JOIN BOXOFFICE ON MOVIES.ID = BOXOFFICE.MOVIE_ID 
WHERE INTERNATIONAL_SALES > DOMESTIC_SALES;

3. List all the movies by their ratings in descending order
---SELECT M.TITLE,B.RATING FROM MOVIES M JOIN BOXOFFICE B ON M.ID=B.MOVIE_ID ORDER BY RATING DESC;

-----

7. OUTER JOINS

-----

1. Find the list of all buildings that have employees
---SELECT DISTINCT BUILDING FROM EMPLOYEES;

2. Find the list of all buildings and their capacity
---SELECT * FROM BUILDINGS;

3. List all buildings and the distinct employee roles in each building (including empty buildings)
---SELECT DISTINCT BUILDING_NAME, ROLE FROM BUILDINGS LEFT JOIN EMPLOYEES
    ON BUILDING_NAME = BUILDING;

------

8. SQL NULL

-----

1. Find the name and role of all employees who have not been assigned to a building
---SELECT NAME,ROLE FROM EMPLOYEES WHERE BUILDING IS NULL;

2. Find the names of the buildings that hold no employees
---SELECT DISTINCT BUILDING_NAME FROM BUILDINGS LEFT JOIN EMPLOYEES ON BUILDING_NAME = BUILDING WHERE ROLE IS NULL;

-----

9. QUERIES WITH EXPRESSIONS

1. List all movies and their combined sales in millions of dollars
---SELECT TITLE, (DOMESTIC_SALES + INTERNATIONAL_SALES)/1000000 AS GROSS_SALES_MILLIONS FROM MOVIES JOIN BOXOFFICE ON MOVIES.ID=BOXOFFICE.MOVIE_ID;

2. List all movies and their ratings in percent
--- SELECT M.TITLE,B.RATING * 10 AS RATING_PERCENT FROM MOVIES M JOIN BOXOFFICE B WHERE M.ID=B.MOVIE_ID;

3. List all movies that were released on even number years
---SELECT TITLE FROM MOVIES WHERE YEAR % 2=0;

10. QUERIES WITH AGGREGATES-I

1. Find the longest time that an employee has been at the studio
---SELECT MAX(YEARS_EMPLOYED) AS LONGEST_TIME FROM EMPLOYEES;

2. For each role, find the average number of years employed by employees in that role
---SELECT ROLE,AVG(YEARS_EMPLOYED)AS AVERAGE_YEARS_EMPLOYED FROM EMPLOYEES GROUP BY ROLE;

3. Find the total number of employee years worked in each building 
---SELECT BUILDING, SUM(YEARS_EMPLOYED) AS TOTAL_YEARS_EMPLOYED FROM EMPLOYEES GROUP BY BUILDING;

11. QUERIES WITH AGGREGATES-II

1. Find the number of Artists in the studio (without a HAVING clause)
---SELECT COUNT(ROLE) FROM EMPLOYEES WHERE ROLE='Artist';

2. Find the number of Employees of each role in the studio
---SELECT COUNT(NAME),ROLE FROM EMPLOYEES GROUP BY ROLE; 

3. Find the total number of years employed by all Engineers
---SELECT ROLE,SUM(YEARS_EMPLOYED)FROM EMPLOYEES GROUP BY ROLE HAVING ROLE="ENGINEER"

1. Find the number of movies each director has directed
---SELECT COUNT(TITLE),DIRECTOR FROM movies GROUP BY DIRECTOR;

2. Find the total domestic and international sales that can be attributed to each director
---SELECT DIRECTOR, SUM(DOMESTICS_SALES + INTERNATIONAL_SALES)AS CUMMULATIVE_SALES_FROM_ALL_MOVIES FROM MOVIES 
   INNER JOIN BOXOFFICE ON MOVIES.ID=BOXOFFICE.MOVIES_ID GROUP BY DIRECTOR;












